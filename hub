--// Services
local Players           = game:GetService("Players")
local UserInputService  = game:GetService("UserInputService")
local RunService        = game:GetService("RunService")
local CoreGui           = game:GetService("CoreGui")
local TeleportService   = game:GetService("TeleportService")
local HttpService       = game:GetService("HttpService")
local VirtualUser       = game:GetService("VirtualUser")

local player = Players.LocalPlayer
local character, humanoid, root

-- =========================================================
--                      STATE
-- =========================================================
local invisible        = false
local noclip           = false
local flying           = false
local speedBoost       = false
local espEnabled       = false
local godMode          = false
local antiAfkEnabled   = false
local noFallEnabled    = false
local infiniteJumpEnabled = false
local flySpeed         = 60

-- physics movers for fly
local bodyVel, bodyGyro

-- defaults (tăng speed & jump cao hơn)
local NORMAL_WALKSPEED   = 20
local BOOSTED_WALKSPEED  = 120
local NORMAL_JUMPHEIGHT  = 8
local BOOSTED_JUMPHEIGHT = 120

-- connections
local conNoclip, conFly, conESPPlayerAdded, conAntiAFK, conNoFall, conInvisDescAdded

-- keep UI button refs to update label/color
local Buttons = {}

-- =========================================================
--                  CHARACTER SETUP
-- =========================================================
local function onCharacterAdded(char)
	character = char
	humanoid  = character:WaitForChild("Humanoid")
	root      = character:WaitForChild("HumanoidRootPart")

	-- re-apply states sau khi respawn
	if speedBoost and humanoid then humanoid.WalkSpeed = BOOSTED_WALKSPEED end
	if invisible  then toggleInvisibility(true) end
end
player.CharacterAdded:Connect(onCharacterAdded)
task.spawn(function() onCharacterAdded(player.Character or player.CharacterAdded:Wait()) end)

-- =========================================================
--                  HELPERS (UI)
-- =========================================================
local function setBtnStyle(btn, active)
	if active then
		btn.BackgroundColor3 = Color3.fromRGB(40, 160, 90)
	else
		btn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
	end
end

local function setBtnState(key, active)
	local btn = Buttons[key]
	if not btn then return end
	setBtnStyle(btn, active)
	if btn:GetAttribute("BaseText") then
		btn.Text = string.format("%s %s", btn:GetAttribute("BaseText"), active and "[ON]" or "[OFF]")
	end
end

-- =========================================================
--                  FEATURES
-- =========================================================

--// Toggle Fly
function toggleFly()
	flying = not flying
	if flying then
		bodyVel = Instance.new("BodyVelocity")
		bodyVel.MaxForce = Vector3.new(1e5,1e5,1e5)
		bodyVel.Velocity = Vector3.new()
		bodyVel.Parent = root

		bodyGyro = Instance.new("BodyGyro")
		bodyGyro.MaxTorque = Vector3.new(1e5,1e5,1e5)
		bodyGyro.P = 1e4
		bodyGyro.CFrame = root.CFrame
		bodyGyro.Parent = root

		conFly = RunService.RenderStepped:Connect(function()
			if not root then return end
			local camCF = workspace.CurrentCamera.CFrame
			local move = Vector3.zero
			if UserInputService:IsKeyDown(Enum.KeyCode.W) then move += camCF.LookVector end
			if UserInputService:IsKeyDown(Enum.KeyCode.S) then move -= camCF.LookVector end
			if UserInputService:IsKeyDown(Enum.KeyCode.A) then move -= camCF.RightVector end
			if UserInputService:IsKeyDown(Enum.KeyCode.D) then move += camCF.RightVector end
			if UserInputService:IsKeyDown(Enum.KeyCode.Space) then move += camCF.UpVector end
			if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then move -= camCF.UpVector end
			bodyVel.Velocity = move.Magnitude > 0 and move.Unit * flySpeed or Vector3.zero
			bodyGyro.CFrame = camCF
		end)
	else
		if conFly then conFly:Disconnect() conFly=nil end
		if bodyVel then bodyVel:Destroy() bodyVel=nil end
		if bodyGyro then bodyGyro:Destroy() bodyGyro=nil end
	end
	setBtnState("Fly", flying)
end

--// Toggle Noclip
function toggleNoclip()
	noclip = not noclip
	if conNoclip then conNoclip:Disconnect() conNoclip=nil end
	if noclip then
		conNoclip = RunService.Stepped:Connect(function()
			if character then
				for _,p in ipairs(character:GetDescendants()) do
					if p:IsA("BasePart") then
						p.CanCollide = false
					end
				end
			end
		end)
	else
		-- Bật lại CanCollide khi tắt
		if character then
			for _,p in ipairs(character:GetDescendants()) do
				if p:IsA("BasePart") then
					p.CanCollide = true
				end
			end
		end
	end
	setBtnState("Noclip", noclip)
end

--// Toggle Invisible
function toggleInvisibility(state)
	invisible = state
	if conInvisDescAdded then conInvisDescAdded:Disconnect() conInvisDescAdded=nil end

	if invisible and character then
		for _,desc in ipairs(character:GetDescendants()) do
			if desc:IsA("BasePart") or desc:IsA("Decal") then
				desc.LocalTransparencyModifier = 1
			end
		end
		conInvisDescAdded = character.DescendantAdded:Connect(function(desc)
			if invisible and (desc:IsA("BasePart") or desc:IsA("Decal")) then
				task.wait()
				desc.LocalTransparencyModifier = 1
			end
		end)
	else
		if character then
			for _,desc in ipairs(character:GetDescendants()) do
				if desc:IsA("BasePart") or desc:IsA("Decal") then
					desc.LocalTransparencyModifier = 0
				end
			end
		end
	end
	setBtnState("Invisible", invisible)
end

-- ESP
local espFolder = Instance.new("Folder")
espFolder.Name = "ESPFolder"
pcall(function() espFolder.Parent = CoreGui end)
if not espFolder.Parent then espFolder.Parent = player:WaitForChild("PlayerGui") end

local function addESP(plr)
	if not (espEnabled and plr and plr.Character) then return end
	local char = plr.Character
	if not char:FindFirstChild("HumanoidRootPart") then return end

	-- Highlight body
	local h = Instance.new("Highlight")
	h.Name = "ESP_Highlight"
	h.FillTransparency = 0.75
	h.OutlineTransparency = 0
	h.OutlineColor = Color3.fromRGB(255,0,0)
	h.Adornee = char
	h.Parent  = espFolder

	-- Billboard name tag
	local head = char:FindFirstChild("Head")
	if head then
		local tag = Instance.new("BillboardGui")
		tag.Name = "ESP_NameTag"
		tag.Size = UDim2.new(0,200,0,50)
		tag.StudsOffset = Vector3.new(0,2,0)
		tag.AlwaysOnTop = true
		tag.Parent = head

		local lbl = Instance.new("TextLabel")
		lbl.BackgroundTransparency = 1
		lbl.Size = UDim2.new(1,0,1,0)
		lbl.Text = plr.Name
		lbl.TextColor3 = Color3.fromRGB(255,0,0)
		lbl.TextStrokeTransparency = 0.5
		lbl.Font = Enum.Font.GothamBold
		lbl.TextSize = 14
		lbl.Parent = tag
	end
end

local function refreshESP()
	espFolder:ClearAllChildren()
	for _,plr in ipairs(Players:GetPlayers()) do
		if plr ~= player then addESP(plr) end
	end
end

function toggleESP()
	espEnabled = not espEnabled
	setBtnState("ESP", espEnabled)
	refreshESP()
	if conESPPlayerAdded then conESPPlayerAdded:Disconnect() conESPPlayerAdded = nil end
	if espEnabled then
		conESPPlayerAdded = Players.PlayerAdded:Connect(function(plr)
			plr.CharacterAdded:Connect(function()
				task.wait(1)
				addESP(plr)
			end)
		end)
	end
end

-- GodMode (fix)
RunService.Heartbeat:Connect(function()
	if godMode and humanoid then
		if humanoid.Health < humanoid.MaxHealth then
			humanoid.Health = humanoid.MaxHealth
		end
		humanoid.BreakJointsOnDeath = false
	end
end)

-- Anti AFK (fix)
function setAntiAFK(state)
	antiAfkEnabled = state
	if conAntiAFK then conAntiAFK:Disconnect() conAntiAFK = nil end
	if antiAfkEnabled then
		conAntiAFK = player.Idled:Connect(function()
			VirtualUser:CaptureController()
			VirtualUser:ClickButton2(Vector2.new())
		end)
	end
	setBtnState("AntiAFK", antiAfkEnabled)
end

-- NoFall
function setNoFall(state)
	noFallEnabled = state
	if conNoFall then conNoFall:Disconnect() conNoFall = nil end
	if noFallEnabled then
		conNoFall = RunService.Heartbeat:Connect(function()
			if root and humanoid then
				if root.Velocity.Y < -60 then
					root.Velocity = Vector3.new(root.Velocity.X, -5, root.Velocity.Z)
				end
			end
		end)
	end
	setBtnState("NoFall", noFallEnabled)
end

-- Infinite Jump
function setInfiniteJump(state)
	infiniteJumpEnabled = state
	setBtnState("Jump", infiniteJumpEnabled)
end

UserInputService.JumpRequest:Connect(function()
	if infiniteJumpEnabled and humanoid then
		humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	end
end)

-- =========================================================
--                        UI
-- =========================================================
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "Hub"
ScreenGui.ResetOnSpawn = false
pcall(function() ScreenGui.Parent = CoreGui end)
if not ScreenGui.Parent then ScreenGui.Parent = player:WaitForChild("PlayerGui") end

local Frame = Instance.new("Frame")
Frame.Parent = ScreenGui
Frame.Size = UDim2.new(0, 520, 0, 320)
Frame.Position = UDim2.new(0.5, -260, 0.5, -160)
Frame.BackgroundColor3 = Color3.fromRGB(45,45,45)
Frame.BackgroundTransparency = 0.05
-- Thay thế đoạn:
-- Frame.Active = true
-- Frame.Draggable = true

-- Bằng code mới:
local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    Frame.Position = UDim2.new(
        startPos.X.Scale, startPos.X.Offset + delta.X,
        startPos.Y.Scale, startPos.Y.Offset + delta.Y
    )
end

Frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

Frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or 
       input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

local FrameCorner = Instance.new("UICorner", Frame); FrameCorner.CornerRadius = UDim.new(0,12)

local Watermark = Instance.new("TextLabel", Frame)
Watermark.AnchorPoint = Vector2.new(1,1)
Watermark.Position = UDim2.new(1, -8, 1, -6)
Watermark.Size = UDim2.new(0, 160, 0, 18)
Watermark.BackgroundTransparency = 1
Watermark.Text = "khangdeptrai"
Watermark.TextSize = 13
Watermark.Font = Enum.Font.Gotham
Watermark.TextColor3 = Color3.fromRGB(220,220,220)
Watermark.TextXAlignment = Enum.TextXAlignment.Right

local List = Instance.new("ScrollingFrame", Frame)
List.BackgroundTransparency = 1
List.Position = UDim2.new(0, 10, 0, 10)
List.Size = UDim2.new(1, -20, 1, -40)
List.ScrollBarThickness = 6
List.CanvasSize = UDim2.new(0,0,0,0)
List.AutomaticCanvasSize = Enum.AutomaticSize.Y

local Grid = Instance.new("UIGridLayout", List)
Grid.FillDirection = Enum.FillDirection.Horizontal
Grid.FillDirectionMaxCells = 2
Grid.CellPadding = UDim2.new(0, 8, 0, 8)
Grid.CellSize    = UDim2.new(0.5, -12, 0, 36)

local function makeButton(key, label, onClick, isToggle, defaultOn)
	local btn = Instance.new("TextButton")
	btn.Parent = List
	btn:SetAttribute("BaseText", label)
	btn.Text = isToggle and (label .. (defaultOn and " [ON]" or " [OFF]")) or label
	btn.Size = UDim2.new(0, 200, 0, 36)
	btn.BackgroundColor3 = Color3.fromRGB(70,70,70)
	btn.TextColor3 = Color3.fromRGB(255,255,255)
	btn.Font = Enum.Font.GothamBold
	btn.TextSize = 14
	Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)

	Buttons[key] = btn
	setBtnStyle(btn, defaultOn or false)

	btn.MouseButton1Click:Connect(function()
		pcall(onClick)
	end)
end

-- =================== Buttons =====================
makeButton("Fly",       "Fly (Toggle)",       function() toggleFly() end, true, flying)
makeButton("Noclip",    "Noclip (Toggle)",    function() toggleNoclip() end, true, noclip)
makeButton("ESP",       "ESP (Toggle)",       function() toggleESP() end, true, espEnabled)
makeButton("Invisible", "Invisible (Toggle)", function() toggleInvisibility(not invisible) end, true, invisible)

makeButton("AntiAFK",   "Anti-AFK (Toggle)",  function() setAntiAFK(not antiAfkEnabled) end, true, antiAfkEnabled)
makeButton("NoFall",    "NoFall (Toggle)",    function() setNoFall(not noFallEnabled) end, true, noFallEnabled)
makeButton("Speed",     "Super Speed",        function()
	speedBoost = not speedBoost
	if humanoid then humanoid.WalkSpeed = speedBoost and BOOSTED_WALKSPEED or NORMAL_WALKSPEED end
	setBtnState("Speed", speedBoost)
end, true, speedBoost)

makeButton("Jump",      "Infinite Jump",      function()
	setInfiniteJump(not infiniteJumpEnabled)
end, true, infiniteJumpEnabled)

makeButton("FlyPlus",   "Fly Speed +",        function() flySpeed = flySpeed + 10 end, false)
makeButton("FlyMinus",  "Fly Speed -",        function() flySpeed = math.max(0, flySpeed - 10) end, false)

makeButton("God",       "GodMode (Toggle)",   function()
	godMode = not godMode
	setBtnState("God", godMode)
end, true, godMode)

makeButton("Rejoin",    "Rejoin",             function() TeleportService:Teleport(game.PlaceId, player) end, false)
makeButton("ServerHop", "Server Hop",         function()
	local ok, res = pcall(function()
		return HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=50"))
	end)
	if ok and res and res.data then
		for _,srv in ipairs(res.data) do
			if srv.playing < srv.maxPlayers then
				TeleportService:TeleportToPlaceInstance(game.PlaceId, srv.id, player)
				return
			end
		end
	end
end, false)
